def cherryPickup(grid):
    n = len(grid)
    dp = [[float('-inf')] * n for _ in range(n)]
    dp[0][0] = grid[0][0]

    for k in range(1, 2 * n - 1):
        new_dp = [[float('-inf')] * n for _ in range(n)]
        for i in range(max(0, k - (n - 1)), min(n - 1, k) + 1):
            for j in range(max(0, k - (n - 1)), min(n - 1, k) + 1):
                if grid[i][k - i] == -1 or grid[j][k - j] == -1:
                    continue
                cherries = dp[i][j]
                if i > 0:
                    cherries = max(cherries, dp[i - 1][j])
                if j > 0:
                    cherries = max(cherries, dp[i][j - 1])
                if i > 0 and j > 0:
                    cherries = max(cherries, dp[i - 1][j - 1])
                if cherries < 0:
                    continue
                cherries += grid[i][k - i]
                if i != j:
                    cherries += grid[j][k - j]
                new_dp[i][j] = cherries
        dp = new_dp

    return max(0, dp[n - 1][n - 1])

if __name__ == "__main__":
    import ast
    grid_str = raw_input().strip()
    grid = ast.literal_eval(grid_str)

    print(cherryPickup(grid))
